diff -r main/main.ino square_lab/main.ino
5,8c5,8
< volatile char edge;
< 
< void TaskSense(void *pvParameters);
< void TaskMotorControl(void * pvParameters);
---
> TaskHandle_t xEdgeHandler;
> TaskHandle_t xCornerHandler;
> volatile int target;
> int GetDegreesMod(void);
18,23c18,19
<   SwitchButtonToPixels();
<   SetAllPixelsRGB(100, 0, 100);
< 
<   xTaskCreate(TaskMotorControl, "motors", 128, NULL, 10, NULL);
<   xTaskCreate(TaskSense, "sense", 128, NULL, 30, NULL);
< }
---
>   // Serial.begin(9600);
>   SetAllPixelsRGB(0, 0, 0);
25,30c21,22
< void backupTurn() {
<   // OnEyes(50, 50, 50)
<   Motors(-30, -65);
<   vTaskDelay(300/portTICK_PERIOD_MS);
<   Motors(0, 0);
< }
---
>   xTaskCreate(TaskEdge, "edge", 128, NULL, 1, &xEdgeHandler);
>   xTaskCreate(TaskCorner, "corner", 128, NULL, 1, &xCornerHandler);
32,39c24,25
< void seekWallStraight() {
<   // OnEyes(50, 50, 50);
<   Motors(100, 100);
<   edge = LookForEdge();
<   while (!LeftDetected(edge) && !RightDetected(edge)) {
<     edge = LookForEdge();
<   }
<   Motors(0, 0);
---
>   
>   vTaskSuspend(xCornerHandler);
42,46c28,29
< void TaskSense(void* pvParameters) {
<   int loop_delay = 10; //5-15 seems to work good with the current setup
<   bool toggle = true;
<   SwitchAmbientToEdge();
<   ResetLookAtEdge();
---
> void TaskEdge(void* pvParameters) {
>   NavigationBegin();
49,54c32,75
<         if (toggle) {
<       toggle = false;
<       SetAllPixelsRGB(50, 0, 0);
<     } else {
<       toggle = true;
<       SetAllPixelsRGB(0, 0, 50);
---
>     Motors(0, 0);
>     vTaskDelay(100/portTICK_PERIOD_MS); //to give it a second to stop
> 
>     SimpleGyroNavigation();
>     SetPixelRGB(TAIL_TOP, 50, 0, 0);
>     float duration = 2.5;
>     float interval = 0.1;
>     //pid loop
>     //Jetts desk
>     float Kp = 2.5;
>     float Ki = 0.0;
>     float Kd = 0.0;
> 
>     int error = 0;
>     int error_last = 0;
>     int error_total = 0;
>     ZeroNavigation();
>     vTaskDelay(100/portTICK_PERIOD_MS); //to give it a second to calibrate
> 
>     int target = GetDegrees(); //target is same as now
> 
>     int left = 80;
>     int right = 80;
>     int delta;
> 
>     //pid loop
>     for (float time = duration; time > 0.0; time -= interval) {
>       SimpleGyroNavigation();
>       error = target - GetDegrees();
>       error_total += error;
> 
>       delta = Kp*error + Ki*error_total + Kd*(error-error_last);
> 
>       int out_left = max(0, min(left + delta, 120));
>       int out_right = max(0, min(right - delta, 120));
> 
>       //visualize motors
>       SetPixelRGB(EYE_LEFT, 0, 0, out_left);
>       SetPixelRGB(EYE_RIGHT, 0, 0, out_right);
>       Motors(out_left, out_right);
> 
> 
>       vTaskDelay(interval*1000/portTICK_PERIOD_MS);
>       error_last = error;
56,58c77,84
<     edge = LookForEdge();
<     vTaskDelay(loop_delay/portTICK_PERIOD_MS);
<     SetAllPixelsRGB(0,0,0);
---
> 
>     //cleanup
>     Motors(0, 0);
>     OffEyes();
> 
>     //task swap
>     vTaskResume(xCornerHandler);
>     vTaskSuspend(NULL);
62,65c88,90
< void TaskMotorControl(void *pvParameters) {
<   bool toggle = true;
<   Motors(50, 65);
<   vTaskDelay(1000/portTICK_PERIOD_MS);
---
> void TaskCorner(void* pvParameters) {
>   NavigationBegin();
> 
67,70c92,147
<     if (LeftDetected(edge) || RightDetected(edge)) {
<       backupTurn();
<     } else {
<       Motors(60, 90);
---
>     Motors(0, 0);
>     vTaskDelay(100/portTICK_PERIOD_MS); //to give it a second to calibrate
> 
>     SetPixelRGB(TAIL_TOP, 0, 50, 0);
>     SimpleNavigation();
> 
>     float interval = 0.1;
>     //pid loop; constants for Jett's desk.
>     // float Kp = 3.5;
>     // float Ki = 0.25;
>     // float Kd = 1.5;
>     float Kp = 1.8;
>     float Ki = 0.4;
>     float Kd = 0.2;
> 
>     int error = 0;
>     int error_last = 0;
>     int error_total = 0;
>     ZeroNavigation();
>     vTaskDelay(100/portTICK_PERIOD_MS); //to give it a second to calibrate
>     int current = GetDegrees();
>     int target = (current + 90)%360; //target is same as now + 90
> 
>     int left = 0;
>     int right = 0;
>     int delta;
> 
>     //pid loop while angle not at target
>     while(abs(target - current) > 1) {
>       SimpleGyroNavigation();
> 
>       current = GetDegrees();
>       error = target - current;
>       error_total += error;
> 
>       delta = Kp*error + Ki*error_total + Kd*(error-error_last);
> 
>       int out_left = max(-80, min(left + delta, 80));
>       int out_right = max(-80, min(right - delta, 80));
> 
>       //visualize motors
>       if (out_left >= 0) {
>         SetPixelRGB(EYE_LEFT, 0, out_left, 0);
>       } else {  //red for reverse
>         SetPixelRGB(EYE_LEFT, out_left, 0, 0);
>       }
>       if (out_right >= 0) {
>         SetPixelRGB(EYE_RIGHT, 0, out_right, 0);
>       } else {  //red for reverse
>         SetPixelRGB(EYE_RIGHT, out_right, 0, 0);
>       }
>       Motors(out_left, out_right);
> 
> 
>       vTaskDelay(interval*1000/portTICK_PERIOD_MS);
>       error_last = error;
72,73c149,156
<     vTaskDelay(50/portTICK_PERIOD_MS);
<     SetAllPixelsRGB(0,0,0);
---
> 
>     //cleanup
>     Motors(0, 0);
>     OffEyes();
> 
> 
>     vTaskResume(xEdgeHandler);
>     vTaskSuspend(NULL);
76a160,234
> int GetDegreesMod() {
>   return (GetDegrees() % 360);
> }
> 
> // void TaskTurn(void *pvParameters) {
> 
> //   for(;;) {
> //     TickType_t xLastWakeTime = xTaskGetTickCount();
> //     vTaskSuspend(xForwardHandler);
> //     SetPixelRGB(TAIL_BOTTOM, 50, 0, 0);
> //     ZeroNavigation();
> //     RotateAccurate(90,1000);
> //     SimpleGyroNavigation();
> //     target = PresentHeading();
> //     vTaskResume(xForwardHandler);
> //     vTaskDelayUntil(&xLastWakeTime, 4000/portTICK_PERIOD_MS);
> //   }
> // }
> 
> // void TaskForward(void *pvParameters) { 
> //   // target = PresentHeading(); old
> //   NavigationBegin();
> 
> //   for(;;) {
> //     vTaskSuspend(xTurnHandler);
> //     int l_speed = 40;
> //     int r_speed = 40;
> //     int error;
> //     int P = 5;
> //     int output;
> //     TickType_t xLastWakeTime = xTaskGetTickCount();
> //     for (int i = 0; i < 30; i++) {
> //       if (i == 0) {
> //         error = 0;
> //         SetPixelRGB(TAIL_BOTTOM, 50, 0, 20);
> //       } else {
> //         SimpleGyroNavigation();
> //         error = target - PresentHeading();
> //         SetPixelRGB(TAIL_BOTTOM, 50, 20, 0);
> //       }
> //       if(error > 0) {
> //         SetPixelRGB(TAIL_TOP, 0, 50, 0);
> //       } else {
> //         SetPixelRGB(TAIL_TOP, 0, 0, 50);
> //       }
> //       output = P*error;
> 
> //       l_speed += output;
> //       r_speed -= output;
> //       l_speed = max(l_speed, 0);
> //       l_speed = min(l_speed, 150);
> //       r_speed = max(l_speed, 0);
> //       r_speed = min(l_speed, 150);
>       
> //       Motors(l_speed, r_speed);
> //       vTaskDelayUntil(&xLastWakeTime, 100/portTICK_PERIOD_MS);
> //     }
> //     // Motors(0,0);
> //     vTaskResume(xTurnHandler);
> //     vTaskDelay(1000/portTICK_PERIOD_MS);
> //   }
> // }
> 
> // void TaskTest(void *pvParameters) {
>   // int x;
>   // SetPixelRGB(TAIL_TOP, 30, 30, 30);
>   // NavigationBegin();
> 
>   // for(;;) {
>   //   SimpleGyroNavigation();
>   //   x = GetDegrees();
>   //   SetAllPixelsRGB(x, x, x);
>   //   vTaskDelay(10000/portTICK_PERIOD_MS);
>   // }
> // }
